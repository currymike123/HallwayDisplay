/* autogenerated by Processing revision 1293 on 2023-08-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.net.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Cool_Space_Game extends PApplet {



Ship s;
ArrayList<Enemy> enemies;
ArrayList<Projectile> projectiles;
ArrayList<Star> stars;

PFont font1;

int health = 5;
int score = 0;

boolean start = true;
boolean restart = false;

//Variables for the server.
Client c;
String data;

public void setup() {
  /* size commented out by preprocessor */;
  frameRate(60);
  /* smooth commented out by preprocessor */;
  background(0);
  noCursor();
  imageMode(CENTER);

  s = new Ship();
  enemies = new ArrayList<Enemy>();
  projectiles = new ArrayList<Projectile>();
  stars = new ArrayList<Star>();
  
  for (int i = 0; i < 1000; i++) {
    Star star = new Star();
    stars.add(star);
  }
  
  font1 = createFont("Arial Bold", 18);
  
  //Connect to the server for the mouse position.
  c = new Client(this, "localhost", 9999);
}

int myMouseY = -100;
int myMouseX = -100;

public void draw() {
  
  if (c.available() > 0) {
    // read the data from the client
    data = c.readString();
    //Split the msg.
    String[] xy = split(data, ',');
    
    float x = PApplet.parseFloat(xy[0]);
    float y  = PApplet.parseFloat(xy[1]);
    
    
    //Set the mouse position to the data from the server.
    myMouseX = PApplet.parseInt(map(PApplet.parseInt(x),0,640,0,width));
    myMouseY = PApplet.parseInt(map(PApplet.parseInt(y),0,480,0,height));
    
    
  }
    
  //Initial Start Screen
  if (start == false) {
      
    background(0);
  
    //Generate Stars in the background ----------------------------
    for (Star s : stars) {
      s.display();
      s.update();
    }
    
    showStartScreen();
    
  }
  
  //Begins Game==================================================================
  if (start == true){

    background(0);
  
    //Generate Stars in the background ----------------------------
    for (Star s : stars) {
      s.display();
      s.update();
    }
    
    //Create and Control User Ship ----------------------------------
    s.display();
    s.fire();
    s.damage();
  
    //Score Display -----------------------------------------------
    scoreDisplay();

    //Spawn Enemies -----------------------------------------------
    if (frameCount % 20 == 0) {   //  frameCount % (#) controls spawn rate
      enemies.add(new Enemy());
    }
  
    //Create and Control Enemies----------------------------------
    if(enemies.size() > 0) {
      for (int n = 0; n < enemies.size(); n++){
        Enemy enemy = enemies.get(n);
        enemy.display();
        enemy.collision();
       }
     }
  
    //Create and Control Projectiles (From User) --------------------
    if(projectiles.size() > 0) {
      for (int n = 0; n < projectiles.size(); n++){
        Projectile projectile = projectiles.get(n);
        projectile.update();
        projectile.fireProjectile();
      }
    }
  
  youLose();  //Checks for losing condition
  youWin();   //Checks for winning condition

  
  }
  checktime();
}

public void checktime(){
   
  if(millis() > 30000){
   
    exit();
  }
  
}

  
public void keyReleased() {
  switch (key) {
     
     case 's':
       start = true;
       break;
       
     case ENTER:
       restart = true;
       break;
       
     case RETURN:
       restart = true;
       break;
     
     case ESC:
       exit();
       break;
      
     case 'b':
       score = 500;
       break;
        //Debugging win condition
        
      default:
        break;

  }
}

public void showStartScreen() {
    fill(0);
    rect(400, 200, 800, 520);
    textFont(font1);
    fill(255);
    textSize(60);
    text("Greetings!", 640, 250);
    fill(0xFFF0AB2C);
    textSize(30);
    text("Use your mouse to control the hero ship:", 500, 340);
    text(" - Move the mouse to dodge / aim", 520, 370);
    text(" - Left Click to shoot", 520, 400);
    fill(0xFF5CDADE);
    text("Hit 200 enemy ships to win", 500, 520);
    text(" - Difficulty will increase at 100 points", 520, 550);
    textSize(50);
    fill(0xFFFF0000);
    text("Godspeed.", 650, 660);
    textSize(30);
    text("Press the 's' key to start", 600, 710);  
}

public void scoreDisplay() {
    fill(40);
    rect(0, 0, width, 50); 
    fill(255);
    rect(0, 47, width, 1);
    textFont(font1);
    textSize(30);
    text("Health: ", 630, 30);
    text("Score: ", 830, 30);
    text(health, 750, 30);
    text(score, 940, 30);
}

public void youLose() {
    //Lose Condition -----------------------------------
    if (health <= 0) {
      background(0);
      textSize(50);
      text("Game Over!", 675, 350);
      textSize(30);
      text("Press Enter to Try Again", 660, 425);
      text("Press Esc to Exit", 695, 475);
    
      if(restart == true) {
        score = 0;
        health = 5;  
      
        enemies.clear();
        projectiles.clear();
        restart = false;
 
      }
    }
}

public void youWin() {
    //Win Condition ---------------------------------------
    if (score >= 200) {
      background(0);
      textSize(70);
      fill(0xFFD3CE1A);
      text("Congratulations, You Win!!!", 300, 300);
      textSize(30);
      fill(230);
      text("Press Enter to Do It Again", 520, 420);
      text(" - Try to Get Here Faster?", 540, 470);
      text(" - Or With Less Damage?", 560, 510);
      fill(0xFFFF0000);
      text("Press Esc to Exit", 580, 700);
    
      if(restart == true) {
        score = 0;
        health = 5;  
      
        enemies.clear();
        projectiles.clear();
        restart = false;
      }
    }
}
  
class Enemy {
  
  //Data--------------------------------------------------------
  PImage enemyShip;

  PVector enemyLocation;
  PVector enemyVelocity;
  
  //PImage[] explosions = new PImage[6];
  //int count = 1;
  //int displayTime = 1000;
  //int lastTime;
  
  //Constructor-------------------------------------------------
  Enemy() {
    enemyShip = loadImage("enemyShip.png");
    
    //for (int i = 1; i < explosions.length; i++) {
    //  explosions[i] = loadImage("Explosion" + nf(i,1) + ".png");
    //}
    //This loads a series of explosion sprites into an array to be displayed when the enemy ship is shot
    
    enemyLocation = new PVector(width + 100, random(0 + 50 + enemyShip.height, height - enemyShip.height));
    
    if (score < 100) {
      enemyVelocity = new PVector(-5, random(-3, 3));
    }
    if (score >= 100) {
      enemyVelocity = new PVector(random(-10, -5), random(-3, 3));
    }
  }
  
  //Methods-----------------------------------------------------
  public void display() {
    
    //Check if the enemy is off screen and delete it
    for (int j = enemies.size() - 1; j >= 0; j--) {
        Enemy enemy = enemies.get(j);
        
        if(enemy.enemyLocation.x < 0){
          enemies.remove(j);
          
        }
    }
    enemyLocation.add(enemyVelocity);
    
    if(enemyLocation.y < 70 || enemyLocation.y > height - 30) {
      enemyVelocity.y = enemyVelocity.y * (-1);
    }
    
    image(enemyShip, enemyLocation.x, enemyLocation.y);
    
  }
  
  
  public void collision() {
    for (int i = projectiles.size() - 1; i >= 0; i--) {
      Projectile projectile = projectiles.get(i);
      
      for (int j = enemies.size() - 1; j >= 0; j--) {
        Enemy enemy = enemies.get(j);
        
        float distance = dist(projectile.projectileLocation.x, projectile.projectileLocation.y, enemy.enemyLocation.x, enemy.enemyLocation.y);
     
        if (distance < 30) {


          println("Index: " + j + " was deleted. There are: " + enemies.size() + " enemies in the arraylist.");
          projectiles.remove(i);
          enemies.remove(j);
          
          score = score + 1;
                    
          //if (millis() - lastTime >= displayTime) {
          //  count = ++count % explosions.length;
          //  lastTime = millis();
          //}
          //image(explosions[count], enemyLocation.x, enemyLocation.y);
          
          //This is supposed to load a series of explosion sprites once the enemy is "shot", but it doesn't seem to work right
          //There is a time delay to display the images in order with a space inbetween them, but I can't get it functioning properly
          //It also seems to run randomly over enemies that were not the ones "shot"
          
          //The projectile is gone do we don't have to check it against all the other enemies.  Break out of the loop. 
          break;
        }
      }
    }
  }
  

}
class Projectile {
  
  //Data--------------------------------------------------------
  PImage shot;

  PVector projectileLocation;
  PVector projectileVelocity;

  //Constructor-------------------------------------------------
  Projectile(int x, int y) {
    shot = loadImage("shot.png");
    
    projectileLocation = new PVector(x, y);
    projectileVelocity = new PVector(7, 0);
  }
  //Methods-----------------------------------------------------
  public void update() {
    projectileLocation.add(projectileVelocity);
  }
  
  public void fireProjectile() { 
    if(projectileLocation.y > 50 && projectileLocation.x < width) {
      fill(255);
      noStroke();
      imageMode(CENTER);
      image(shot, projectileLocation.x, projectileLocation.y);
    }
  }
  
}
class Ship {
  
  //Data--------------------------------------------------------
  PImage userShip;
  
  //Constructor-------------------------------------------------
  Ship() {
    userShip = loadImage("userShip.png");
  }
  
  //Methods-----------------------------------------------------
  public void display() {
    image(userShip, myMouseX, myMouseY);
  }
  
  public void fire() {
    
      if(frameCount % 20 == 0){
        println("fire");
        projectiles.add(new Projectile(myMouseX, myMouseY));
      }
    
  }
  
  public void damage() {
    for (int j = enemies.size() - 1; j >= 0; j--) {
      Enemy enemy = enemies.get(j);
        
      float distance = dist(myMouseX, myMouseY, enemy.enemyLocation.x, enemy.enemyLocation.y);
        
      if (distance < userShip.height) {
          enemies.remove(j);
          
          health = health - 1;
                 
        }
      }
  }
}
class Star {
  
  //Data---------------------------------------------------------
  PVector starLocation;
  PVector starVelocity;
  float size;
  int maxSize = 5;
  float Color;
  
  //Constructor--------------------------------------------------
  Star() {
    size = random(maxSize);
    starLocation = new PVector(random(width), random(height));
    starVelocity = new PVector(-2, 0);
    Color = (255 / maxSize) * size;
  }
  
  
  
  //Methods------------------------------------------------------
  public void display() {
    noStroke();
    fill(Color);
    ellipse(starLocation.x, starLocation.y, size, size);
  }
  
  public void update() {
    starLocation.add(starVelocity);
    
    if (starLocation.x <= 0) {
      starLocation.x = width;
    }
  }
}


  public void settings() { size(1600, 800);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--hide-stop", "Cool_Space_Game" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
