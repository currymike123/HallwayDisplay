/* autogenerated by Processing revision 1293 on 2023-08-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Iterator;
import processing.net.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class rain extends PApplet {





//Global Variables

//Variables for the server.
Client c;
String data;

ArrayList<Drop> dList; 
Umbrella u; 
Sun s; 
float fade; 
int startTime;
public void setup(){
  /* size commented out by preprocessor */; 
  dList = new ArrayList<Drop>(); 
  s = new Sun(new PVector(width, height), new PVector(0, 0));
  u = new Umbrella(new PVector(width/2, height/2), s.theta); 
  startTime = millis();
  
  //Connect to the server for the mouse position.
  c = new Client(this, "localhost", 9999);
}

float myMouseY = width-100;

float myMouseX = height-100;

public void draw(){
  
  if (c.available() > 0) {
    // read the data from the client
    data = c.readString();
    //Split the msg.
    String[] xy = split(data, ',');
    
    float x = PApplet.parseFloat(xy[0]);
    float y  = PApplet.parseFloat(xy[1]);
    
    
    //Set the mouse position to the data from the server.
    myMouseX = PApplet.parseInt(map(PApplet.parseInt(x),0,640,0,width));
    myMouseY = PApplet.parseInt(map(PApplet.parseInt(y),0,480,0,height));
    println(myMouseX);
  }
  
  background(0xFFEDFFFF);  
  s.run(); 
  u.run(); 
  if(frameCount % 5 == 0){
    dList.add(new Drop(new PVector(random(-10, width), -40), new PVector(0, random(1, 2)), 50, false));
    dList.add(new Drop(new PVector(random(-10, width), -40), new PVector(0, random(3, 4)), 100, true));
    dList.add(new Drop(new PVector(random(-10, width), -40), new PVector(0, random(4, 5)), 200, true));
    dList.add(new Drop(new PVector(random(-10, width), -40), new PVector(0, random(6, 7)), 255, true));
  }
  Iterator<Drop> it = dList.iterator();
   while(it.hasNext()){
      Drop d = it.next(); 
      d.run(); 
      if(d.isBottom()){
         d.velocity = new PVector(random(-2, 2), random(-2, -7));  
         d.acceleration = new PVector(.01f, .1f); 
         if(d.dying==2){
           it.remove(); 
         }
      }
       if(dist(d.location.x, d.location.y, u.initLoc.x, u.initLoc.y)<45 && d.blocked==true){
         d.dying++; 
         d.velocity = new PVector(random(-2, 2), random(-1, -2));  
         d.acceleration = new PVector(.01f, .1f); 
      }
   }
   
 checktime();
}

public void mousePressed(){
  if(u.up == false && mouseX>(width-100)-50 && mouseX<(width-100)+50 && mouseY>(height-100)-50 && mouseY<(height-100)+50){
      u.state = 1; 
  } else if(u.up==true){
    u.state--; 
    u.up = false; 
  }
}

public void checktime(){
   
  if(millis() > 30000){
   
    exit();
  }
  
}
class Drop{
  PVector location; 
  PVector velocity; 
  PVector acceleration; 
  boolean isDead; 
  int dying; 
  int alpha; 
  boolean blocked; 
  
  Drop(PVector l, PVector v, int a, boolean blocked){
    this.location = l.copy(); 
    this.velocity = v.copy(); 
    this.acceleration = new PVector(0, 0); 
    this.isDead = false; 
    dying = 0; 
    alpha = a; 
    this.blocked = blocked; 
  }
  
  public void run(){
    update(); 
    display(); 
  }
  
  public void update(){
    location.add(velocity); 
    velocity.add(acceleration); 
  }
  
  public void display(){
    if(dying<1){
      fill(0xFFB5F3F7, alpha);
      noStroke();
      for (int i = 2; i < 8; i++ ) {
        ellipse(location.x, location.y + i*4, i*2, i*2);
      }
    } else{
      for (int i = 8; i > 2; i--) {
        ellipse(location.x, location.y - i*2, i*1.5f, i*1.5f);
      }
    }
  }
  
  public boolean isBottom(){
    if(this.location.y>height - 30){
      dying++; 
      return true; 
    } else{
    return false; 
    }
  }
}
class Sun{
  
  float r; 
  float theta; 
  PVector location; 
  PVector velocity; 
  float add; 
  
  
  Sun(PVector l, PVector v){
    location = l; 
    velocity = v; 
    theta = PI/2; 
    add = PI/800; 
  }
  
  public void run(){
    update(); 
    display(); 
  }
  
  public void update(){
    if(theta<=2*PI && theta>=PI/2){
      theta+=add; 
    } 
    if(theta>=2*PI || theta<=PI/2){
      add*=-1; 
      theta+=add; 
    }
    println(theta);
    float fadeR = map(theta, PI-(PI/6), 2*PI, 20, 197); 
    float fadeG = map(theta, PI-(PI/6), 2*PI, 40, 215);
    float fadeB = map(theta, PI-(PI/6), 2*PI, 74, 215);
    if(mousePressed==true){
      background(0xFFEDFFFF);
    }else{
      background(fadeR, fadeG, fadeB);
    }
    
  }
  
  public void display(){
    float alpha = 255; 
      noFill(); 
      strokeWeight(2); 
    for(int i = 0; i<350; i+=10){
      stroke(0xFFFF9D00, alpha); 
      ellipse(location.x+(1000*cos(theta)), location.y+(1000*sin(theta)), i, i);
      alpha-=6; 
    }
    noStroke(); 
  }
  


}
class Umbrella{
  
  PVector initLoc; 
  PVector velocity; 
  float theta; 
  int state; 
  boolean up; 
  
  Umbrella(PVector l, float a){
    initLoc = l; 
    velocity = new PVector(0, 1); 
    theta = a; 
    state = 0; 
    up = false; 
  }
  
  public void run(){
    update(); 
    drawUmbrella(); 
  }
  
  public void update(){
    if(state == 0){
      initLoc.x = myMouseX; 
      initLoc.y = myMouseY; 
    } else if(state == 1){
      initLoc.x = myMouseX; 
      initLoc.y = myMouseY;   
      up = true; 
    }  
  }
  
  public void drawUmbrella(){
     fill(0xFFB5F3F7);
     arc(initLoc.x, initLoc.y, 100, 80, PI, 2*PI);
     rect(initLoc.x-4, initLoc.y, 5, 60);
     noFill(); 
     stroke(0xFF54DFE8);
     strokeWeight(5); 
     arc(initLoc.x-12, initLoc.y+60, 20, 20, 0, PI);
     noStroke(); 
     fill(0xFF54DFE8);
     triangle(initLoc.x+4, initLoc.y-38, initLoc.x-6, initLoc.y-38, initLoc.x-1, initLoc.y-48);  
     noStroke(); 
     noFill(); 
  }
  
  
}


  public void settings() { size(1440, 740, P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--hide-stop", "rain" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
