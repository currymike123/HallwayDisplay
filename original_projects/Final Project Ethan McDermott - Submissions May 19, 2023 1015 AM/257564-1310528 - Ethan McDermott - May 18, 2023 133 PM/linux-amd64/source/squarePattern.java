/* autogenerated by Processing revision 1293 on 2023-08-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.net.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class squarePattern extends PApplet {

//find a way to keep location changes static so that objects remain in the same place from their creation

//click and drag to move sqaures in columns

//create a style and look at other projects you are interested in, sketch
//out what you want the final project to look like. Simple concept and play off of it.



//Global Variables

//Variables for the server.
Client c;
String data;

//Number variable
int num=50;
PVector pos;
Strand[] strands;

public void setup() {
  /* size commented out by preprocessor */;
  frameRate(60);
  //smooth();
  background(0);
  
  //Changed the number of strands to 36 so it fits within your frame.
  strands=new Strand[64];
  
  //Offset the y location by -125 so it centers in the frame.
  pos=new PVector(-75, -175);

  //Create your stands with an increasing loop.
  for (int i=0; i<strands.length; i++) {
   
    //Check add to the y location at every 6th strand.  Make sure to skip the first strand.
    if (i % 8 == 0 && i != 0) {
      pos.x = -75;
      pos.add(0, 125);
    }
    //Add the strand.
    strands[i] = new Strand(pos.copy());
    
    //Increase the x location by 125.
    pos.add(125, 0);
  }
  
  //Connect to the server for the mouse position.
  c = new Client(this, "localhost", 9999);
}

float myMouseY = -100;

float myMouseX = -100;

public void draw() {
  
  if (c.available() > 0) {
    // read the data from the client
    data = c.readString();
    //Split the msg.
    String[] xy = split(data, ',');
    
    float x = PApplet.parseFloat(xy[0]);
    float y  = PApplet.parseFloat(xy[1]);
    
    
    //Set the mouse position to the data from the server.
    myMouseX = PApplet.parseInt(map(PApplet.parseInt(x),0,640,0,width));
    myMouseY = PApplet.parseInt(map(PApplet.parseInt(y),0,480,0,height));
  }
  background(0);
  
  //Draw the strands to the screen with a decreasing for loop.  This way the layering is correct.
  //Start from the length of the array - 1.  Draw the strands until you reach index 0.
  for (int i=strands.length-1; i>=0; i--) {
    strands[i].display();
  }
  
}
class SquareRot {
  //Data
  int size;
  int rgb;
  int tempRgb;
  PVector location;
  float angle=0; //location
  float aVelocity; //velocity
  float aAcceleration; //acceleration
  float factor;

  //Constructor
  SquareRot(PVector _location, int c, float x) {
    location=_location;
    size=(int)x;
    aVelocity=0;
    aAcceleration=0.001f;
    rgb=color(c);
    factor = 0;
  }
  //Methods
  public void display() {
    pushMatrix();
    rectMode(CENTER);
    translate(location.x, location.y);
    rotate(angle);
    fill(rgb);
    square(0, 0, size);
    noStroke();
    popMatrix();
    factor = (myMouseX/width) / 20;
    angle+=factor;
    angle+=aVelocity;
    //println(aVelocity);
  }
}
class Strand {
  SquareRot[] column; //array to hold all the squares
  PVector location; //location to place the array
  PVector addPos;

  //Constructor
  Strand(PVector posL) {
    location= posL;
    column=new SquareRot[35];
    addPos = new PVector(6, 10);
    PVector tempLocation = location.copy();
    int c1 = color(0, 0, 0);
    int c2 = color(250, 250, 250);
    for (int i=0; i<column.length; i++) {
      float count = i;
      float count2 = i;
      float step = count/column.length;
      float step2 = count2/column.length;
      int c = lerpColor(c1, c2, step);
      float x= lerp(100, 50, step2);
      column[i] = new SquareRot(tempLocation.copy(), c, x);
      tempLocation.add(addPos);
    }
  }
  //display stuff function
  public void display() {
    for (int i=0; i<column.length; i++) {
      column[i].display();
    }
  }
}


  public void settings() { size(900, 900); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--hide-stop", "squarePattern" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
